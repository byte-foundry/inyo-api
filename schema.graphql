scalar DateTime
scalar Date
scalar Time
scalar Json
scalar Upload
scalar TimeZone

directive @deprecated(
	reason: String = "No longer supported"
) on FIELD_DEFINITION | ENUM_VALUE

type Query {
	me: User
	customer(id: ID, token: String): Customer
	quote(id: ID!): Quote
	project(id: ID!, token: String): Project
	item(id: ID!, token: String, updateCommentViews: Boolean): Item
	itemComments(itemId: ID!, token: String): [Comment!]!
		@deprecated(reason: "Prefer using item query directly.")
	# Get user's reminders
	reminders: [Reminder!]!
	# Get active items sorted by priority
	items: [Item!]! @deprecated(reason: "Use tasks or me.tasks instead")
	# Get tasks, projectId can only be used with an admin token
	tasks(
		filter: TasksFilterInput
		sort: TasksSortInput
		projectId: ID
		token: String
	): [Item!]!
	# Get user account activity
	activity(projectId: ID!): [Event!]!
	# List unsplash photos
	unsplashPhotos(keyword: String, page: Int): UnsplashPhotoConnection!
	emailTypes: [EmailType!]!
	emailTemplate(typeName: String!, category: String!): EmailTemplate!
	plannedWorkingTimes(from: Date, to: Date): [ScheduleWorkTime!]!
}

type Mutation {
	checkEmailAvailability(email: String!): Boolean!
	signup(
		email: String!
		password: String!
		firstName: String!
		lastName: String!
		referrer: String
		company: CompanyInput
		settings: SettingsInput
	): AuthPayload!
	sendResetPassword(email: String!): Boolean
	checkResetPassword(resetToken: String!): Boolean
	resetPassword(resetToken: String!, newPassword: String!): AuthPayload!
	login(email: String!, password: String!): AuthPayload!

	updatePassword(oldPassword: String!, newPassword: String!): User

	# Update user profile and his company
	updateUser(
		email: String
		firstName: String
		lastName: String
		startWorkAt: Time
		endWorkAt: Time
		timeZone: TimeZone
		workingDays: [DAY!]
		defaultDailyPrice: Int
		defaultVatRate: Int
		workingFields: [String!]
		skills: [Skill!]
		otherSkill: String
		jobType: JobType
		interestedFeatures: [String!]
		hasUpcomingProject: Boolean
		canBeContacted: Boolean
		painsExpressed: [String!]
		otherPain: String
		company: CompanyInput
		settings: SettingsInput
	): User

	# Create a new customer inside the user's company
	createCustomer(
		email: String!
		name: String
		firstName: String
		lastName: String
		title: Title
		phone: String
		occupation: String
		address: AddressInput
		userNotes: Json
	): Customer!
	# Update a customer with new date
	updateCustomer(
		id: ID!
		email: String
		name: String
		firstName: String
		lastName: String
		title: Title
		phone: String
		occupation: String
		address: AddressInput
		userNotes: Json
		customer: CustomerInput
	): Customer!
	# Remove a customer
	removeCustomer(id: ID!): Customer!

	# Create a new project for a customer of the user's company
	createProject(
		customerId: ID
		customer: CustomerInput
		name: String
		sharedNotes: Json
		personalNotes: Json
		template: ProjectTemplate
		sections: [SectionInput!]
		deadline: DateTime
		budget: Float
		notifyActivityToCustomer: Boolean
	): Project!
	# Update project
	updateProject(
		id: ID!
		name: String
		sharedNotes: Json
		personalNotes: Json
		quoteHeader: Json
		quoteFooter: Json
		customerId: ID
		customer: CustomerInput
		deadline: DateTime
		budget: Float
		notifyActivityToCustomer: Boolean
	): Project
	# Finish project
	archiveProject(id: ID!): Project!
	unarchiveProject(id: ID!): Project!
	# Remove project
	removeProject(id: ID!): Project!

	# Add section to a project
	addSection(
		projectId: ID!
		name: String!
		items: [ItemInput!]
		position: Int
	): Section!
	# Update
	updateSection(id: ID!, name: String, position: Int, price: Float): Section
	# Remove section
	removeSection(id: ID!): Section

	# Add an item to a section
	addItem(
		projectId: ID
		sectionId: ID
		name: String!
		type: ItemType
		description: String
		unit: Float
		position: Int
		dueDate: DateTime
		dailyRate: Float
		linkedCustomer: CustomerInput
		linkedCustomerId: ID
		tags: [ID!]

		# deprecated
		reviewer: Reviewer
		unitPrice: Int
		vatRate: Int
	): Item!
	# Update item properties
	updateItem(
		id: ID!
		# Updating the item's section in the project
		sectionId: ID
		projectId: ID
		token: String
		name: String
		type: ItemType
		description: String
		unit: Float
		timeItTook: Float
		comment: CommentInput
		position: Int
		dueDate: DateTime
		linkedCustomer: CustomerInput
		linkedCustomerId: ID
		tags: [ID!]
		dailyRate: Float

		# deprecated
		reviewer: Reviewer
		vatRate: Int
		unitPrice: Int
		notifyCustomer: Boolean
	): Item

	# Add task to the focus zone
	focusTask(
		id: ID!
		reminders: [ReminderInput]
		from: Date
		for: Date
		schedulePosition: Int
		action: FocusActionType
	): Item!

	# Remove task from the focus zone
	unfocusTask(id: ID!, from: Date): Item!

	# Start the timer for a task (ending current task timer)
	startTaskTimer(id: ID!): Item!

	# Stop the current task timer
	stopCurrentTaskTimer: Item

	# Stop the current task timer
	clearTaskWorkedTimes(taskId: ID!): Item!

	# Update an already validated item
	updateValidatedItem(id: ID!, unit: Float!, comment: CommentInput!): Item
		@deprecated(reason: "Use updateItem instead.")
	# Remove an item
	removeItem(id: ID!): Item
	# Snooze an item
	snoozeItem(id: ID!, until: DateTime, during: Int): Item
		@deprecated(reason: "Tasks cannot be snoozed anymore.")
	# Unsnooze an item
	unsnoozeItem(id: ID!): Item
		@deprecated(reason: "Tasks cannot be unsnoozed anymore.")
	# Finish an item
	finishItem(id: ID!, token: String, timeItTook: Float, for: Date): Item
	# Reset an item (going back to pending)
	unfinishItem(id: ID!, token: String, for: Date): Item

	#post a comment on an item
	postComment(itemId: ID!, token: String, comment: CommentInput!): Item

	uploadAttachments(
		files: [Upload!]!
		taskId: ID
		projectId: ID
		token: String
		documentType: DocumentType
	): [File!]

	updateFile(id: ID!, filename: String!): File

	removeFile(id: ID!): File

	cancelReminder(id: ID!): Reminder

	# sends a test email to the user
	sendReminderTestEmail(id: ID!): Boolean!
	# sends a test preview email to the user
	sendReminderPreviewTestEmail(taskId: ID!, type: ReminderType!): Boolean!
	sendCustomEmailPreview(subject: Json!, content: Json!): Boolean!

	markNotificationsAsRead: Boolean!
	createTag(name: String!, colorBg: String!, colorText: String!): Tag!
	updateTag(id: ID!, name: String, colorBg: String, colorText: String): Tag!
	removeTag(id: ID!): Tag!

	requestCollab(
		userEmail: String!
		inviteSignup: Boolean
		projectId: ID
	): CollabRequest!
	acceptCollabRequest(requestId: ID!): CollabRequest!
	rejectCollabRequest(requestId: ID!): CollabRequest!
	assignToTask(taskId: ID!, collaboratorId: ID!): Item!
	removeAssignmentToTask(taskId: ID!, collaboratorId: ID!): Item!
	linkToProject(projectId: ID!, collaboratorId: ID!): Project!
	removeLinkToProject(projectId: ID!, collaboratorId: ID!): Project!
	removeCollab(collaboratorId: ID!): User!
	cancelRequestCollab(collabRequestId: ID!): CollabRequest!

	updateEmailTemplate(
		id: ID!
		timing: Json
		subject: Json
		content: Json
	): EmailTemplate!
	setTemplateToDefault(id: ID!): EmailTemplate!

	# Create a project's quote
	issueQuote(
		projectId: ID!
		sections: [QuoteSectionInput!]
		header: Json
		footer: Json
		hasTaxes: Boolean!
		taxRate: Float
	): Quote!

	acceptQuote(id: ID!, token: String!): Quote!
}

input CommentInput {
	text: String!
}

input AddressInput {
	street: String
	city: String
	postalCode: String
	country: String
}

input CompanyInput {
	name: String
	email: String
	address: AddressInput
	phone: String
	type: String
	siret: String
	rcs: String
	rcsCity: String
	rm: String
	vat: String
	vatRate: Float
	logo: Upload
	banner: Upload
	bannerUnsplashId: ID
	documents: [Upload!]
}

input SettingsInput {
	assistantName: String
	language: String
	hasFullWeekSchedule: Boolean
	askItemFinishConfirmation: Boolean
	askStartProjectConfirmation: Boolean
}

input CustomerInput {
	name: String!
	title: Title
	firstName: String
	lastName: String
	email: String!
	address: AddressInput
	phone: String
	occupation: String
	userNotes: Json
	siret: String
	rcs: String
	rm: String
}

input ItemInput {
	name: String!
	description: String
	unit: Float
	type: ItemType
	tags: [String!]

	# deprecated
	reviewer: Reviewer
	unitPrice: Int
	vatRate: Int
}

input SectionInput {
	name: String!
	items: [ItemInput!]!
}

input QuoteItemInput {
	name: String!
}

input QuoteSectionInput {
	name: String!
	price: Float!
	items: [QuoteItemInput!]!
}

input ReminderInput {
	# seconds after focus needed before notifying
	delay: Int
	type: ReminderType
}

type AuthPayload {
	token: String!
	user: User!
}

type Address {
	street: String
	city: String
	postalCode: String
	country: String
}

# Represents a company or an individual that is going to receive an invoice
type Customer {
	id: ID!
	title: Title
	firstName: String
	lastName: String
	name: String
	email: String!
	token: String
	address: Address
	phone: String
	occupation: String
	userNotes: Json
	siret: String
	rcs: String
	rm: String
	vat: String
	language: String!
}

enum ProjectStatus {
	ONGOING
	ARCHIVED

	# deprecated
	REMOVED
	FINISHED
}

enum ProjectTemplate {
	BLANK
	WEBSITE
	IDENTITY
	PROSPECTION
	MOTION
	LANDING
	CARD
	FLYER_A5
	FACEBOOK_AD
	TRANSLATION
}

enum ItemStatus {
	PENDING
	FINISHED

	# deprecated statuses
	SNOOZED
	UPDATED
	UPDATED_SENT
	ADDED
	ADDED_SENT
}

enum Reviewer {
	USER
	CUSTOMER
}

enum ReminderType {
	# 5 min delay before sending
	DELAY
	# 2 day reminder
	FIRST
	# FIRST + days reminder
	SECOND
	# SECOND + 1 days reminder
	LAST

	INVOICE_DELAY
	INVOICE_FIRST
	INVOICE_SECOND
	INVOICE_THIRD
	INVOICE_FOURTH
	INVOICE_LAST

	CONTENT_ACQUISITION_DELAY
	CONTENT_ACQUISITION_FIRST
	CONTENT_ACQUISITION_SECOND

	CUSTOMER_REPORT
}

enum ReminderStatus {
	PENDING
	SENT
	ERROR
	CANCELED
}

enum DAY {
	MONDAY
	TUESDAY
	WEDNESDAY
	THURSDAY
	FRIDAY
	SATURDAY
	SUNDAY
}

enum EmailCategory {
	CUSTOMER
	CUSTOMER_REPORT
	CONTENT_ACQUISITION
	INVOICE
	COMMENT_ADDED
}

enum FocusActionType {
	MOVE
	SPLIT
}

type Reminder {
	id: ID!
	item: Item
	customer: Customer
	type: ReminderType!
	sendingDate: DateTime!
	status: ReminderStatus
}

type ReminderPreview {
	type: ReminderType!
	sendingDate: DateTime!
	delay: Int!
	isRelative: Boolean
}

union Viewer = User | Customer

type CommentView {
	viewer: Viewer!
	viewedAt: DateTime!
}

union Author = User | Customer

type Comment {
	id: ID!
	task: Item!
	text: String!
	author: Author
	views: [CommentView!]!
	createdAt: DateTime!
}

enum ItemType {
	DEFAULT
	CUSTOMER
	CONTENT_ACQUISITION
	CUSTOMER_REMINDER
	VALIDATION
	USER_REMINDER
	INVOICE
	PERSONAL
}

type TimeRange {
	start: DateTime!
	end: DateTime
}

type ScheduleSpot {
	date: Date!
	position: Int!
	status: ItemStatus!
}

type Item {
	id: ID!
	owner: User!
	assignee: User
	scheduledFor: Date
		@deprecated(
			reason: "scheduledFor has been replaced with scheduledForDays.date"
		)
	schedulePosition: Int
		@deprecated(
			reason: "scheduledPosition has been replaced with scheduledForDays.position"
		)
	scheduledForDays: [ScheduleSpot!]!
	linkedCustomer: Customer
	name: String!
	type: ItemType!
	description: String
	unit: Float!
	section: Section
	comments: [Comment!]!
	status: ItemStatus!
	reminders: [Reminder!]!
	remindersPreviews: [ReminderPreview!]!
	position: Int
	timeItTook: Float
	dailyRate: Float
	dueDate: DateTime
	attachments: [File!]!
	tags: [Tag!]!
	finishedAt: DateTime
	createdAt: DateTime!
	currentlyTimedBy: User
	workedTimes: [TimeRange!]!

	isFocused: Boolean!
		@deprecated(reason: "Focus has been replaced with scheduledFor.")
	reviewer: Reviewer @deprecated(reason: "Use `type: CUSTOMER` instead.")
	unitPrice: Int @deprecated(reason: "Unit price is not used anymore.")
	pendingUnit: Float
		@deprecated(reason: "There is no validation anymore. Use `unit` directly.")
	vatRate: Int! @deprecated(reason: "Vat rate is not used anymore.")
}

type Section {
	id: ID!
	name: String!
	items: [Item!]!
	project: Project!
	position: Int!
	price: Float
}

type QuoteItem {
	id: ID!
	name: String!
}

type QuoteSection {
	id: ID!
	name: String!
	items: [QuoteItem!]!
	price: Float!
}

type Quote {
	id: ID!
	issueNumber: Int!
	header: Json
	footer: Json
	sections: [QuoteSection!]!
	project: Project!
	hasTaxes: Boolean!
	taxRate: Float
	invalid: Boolean!
	validQuote: Quote
	acceptedAt: DateTime
	createdAt: DateTime!
}

type Project {
	id: ID!
	name: String!
	template: ProjectTemplate
	sharedNotes: Json
	personalNotes: Json
	issuer: Company!
	owner: User!
	customer: Customer
	token: String
	status: ProjectStatus!
	sections: [Section!]!
	total: Float
	viewedByCustomer: Boolean!
	issuedAt: DateTime
	deadline: DateTime
	budget: Float
	notifyActivityToCustomer: Boolean!
	daysUntilDeadline: Int
	attachments: [File!]!
	linkedCollaborators: [User!]!
	quoteHeader: Json
	quoteFooter: Json
	quotes: [Quote!]!
	createdAt: DateTime!
	updatedAt: DateTime!
}

union ExternalImage = File | UnsplashPhoto

type Company {
	id: ID!
	name: String
	owner: User!
	email: String
	address: Address
	phone: String
	type: String
	siret: String
	rcs: String
	rcsCity: String
	rm: String
	vat: String
	vatRate: Float
	logo: File
	banner: ExternalImage
	projects: [Project!]!
	documents: [File!]!

	customers: [Customer!]!
		@deprecated(reason: "Use `customers` on User instead.")
}

enum Title {
	MONSIEUR
	MADAME
}

enum JobType {
	TEAM
	FULLTIME_INDIVIDUAL
	PARTTIME_INDIVIDUAL
	NOT_FREELANCER
}

type Settings {
	assistantName: String!
	language: String!
	hasFullWeekSchedule: Boolean!
	askItemFinishConfirmation: Boolean!
		@deprecated(reason: "Not available anymore.")
	askStartProjectConfirmation: Boolean!
}

enum CollabRequestStatus {
	PENDING
	REJECTED
	ACCEPTED
	CANCELED
}

enum Skill {
	PRINT_DESIGN
	WEB_DESIGN
	UX_DESIGN
	UI_DESIGN
	COPYWRITING
	VIDEO
	ACCOUNTING
	PHOTOGRAPHY
	MARKETING
	FRONT_END_DEVELOPMENT
	BACK_END_DEVELOPMENT
}

type User {
	id: ID!
	email: String!
	firstName: String
	lastName: String
	customers: [Customer!]!
	collaborators: [User!]!
	collaboratorRequests: [CollabRequest!]!
	collaborationRequests: [CollabRequest!]!
	assignedTasks: [Item!]!
	projects: [Project!]!
	company: Company!
	defaultDailyPrice: Int
	defaultVatRate: Int @deprecated(reason: "Vat rate is not used anymore.")
	clientViews: Int!
	startWorkAt: Time
	endWorkAt: Time
	workingDays: [DAY!]!
	timeZone: TimeZone
	workingFields: [String!]!
	jobType: JobType
	interestedFeatures: [String!]!
	hasUpcomingProject: Boolean
	settings: Settings!
	hmacIntercomId: String!
	tasks(
		filter: TasksFilterInput
		schedule: ScheduleFilterInput
		sort: TasksSortInput
		first: Int
		after: ID
	): [Item!]!
	schedule(start: Date, first: Int): [ScheduleDay!]!
	focusedTasks: [Item!]!
	currentTask: Item
	notifications(before: DateTime): [Notification!]!
	tags: [Tag!]!
	signedUpAt: DateTime!
	lifetimePayment: Boolean!
	emailTemplates: [EmailTemplate!]!
	quoteNumber: Int!
}

type CollabRequest {
	id: ID!
	requester: User!
	requestee: User
	requesteeEmail: String
	status: CollabRequestStatus!
	acceptedAt: DateTime
	rejectedAt: DateTime
	createdAt: DateTime!
	updatedAt: DateTime!
}

union Owner = User | Customer

enum DocumentType {
	DEFAULT
	ADMIN
	DELIVERABLE
}

type File {
	id: ID!
	owner: Owner
	filename: String!
	mimetype: String!
	encoding: String!
	url: String!
	documentType: DocumentType!
	createdAt: DateTime!
	linkedProject: Project
	linkedTask: Item
}

input TasksFilterInput {
	linkedCustomerId: ID
}

enum ScheduleFilterInput {
	UNSCHEDULED
	SCHEDULED
	TO_BE_RESCHEDULED
	FINISHED_TIME_IT_TOOK_NULL
}

enum TasksSortInput {
	unit_ASC
	unit_DESC
	dueDate_ASC
	dueDate_DESC
	createdAt_ASC
	createdAt_DESC
}

enum EventType {
	VIEWED_PROJECT
	UPLOADED_ATTACHMENT
	REMOVED_ATTACHMENT
	FOCUSED_TASK
	UNFOCUSED_TASK
	SENT_REMINDER
	CANCELED_REMINDER
	ADDED_TASK
	UPDATED_TASK
	FINISHED_TASK
	UNFINISHED_TASK
	REMOVED_TASK
	CREATED_PROJECT
	UPDATED_PROJECT
	ARCHIVED_PROJECT
	UNARCHIVED_PROJECT
	REMOVED_PROJECT
	POSTED_COMMENT
	ADDED_SECTION
	UPDATED_SECTION
	REMOVED_SECTION
	COLLAB_ASKED
	COLLAB_REQUESTED
	COLLAB_ACCEPTED
	COLLAB_REJECTED
	LINKED_CUSTOMER_TO_TASK
	UNLINKED_CUSTOMER_TO_TASK
	LINKED_CUSTOMER_TO_PROJECT
	UNLINKED_CUSTOMER_TO_PROJECT
	LINKED_COLLABORATOR_TO_PROJECT
	UNLINKED_COLLABORATOR_TO_PROJECT
	ASSIGNED_TO_TASK
	REMOVE_ASSIGNMENT_TO_TASK
	VIEWED_QUOTE
	ACCEPTED_QUOTE
}

union EventEmitter = User | Customer
union EventObject = Project | Section | Item | Comment | Reminder | File
union EventSubject = User | Customer

type Event {
	id: ID!
	type: EventType!
	from: EventEmitter
	subject: EventSubject
	object: EventObject
	metadata: Json
	createdAt: DateTime!
}

union NotificationEmitter = User | Customer
union NotificationObject = Project | Item | User | CollabRequest

type Notification {
	id: ID!
	unread: Boolean!
	from: NotificationEmitter
	object: NotificationObject
	eventType: EventType!
	createdAt: DateTime!
	updatedAt: DateTime!
}

type Tag {
	id: ID!
	name: String!
	colorBg: String!
	colorText: String!
	items: [Item!]!
}

union DeadlineObject = Project | Item

type ScheduleDay {
	date: Date
	tasks: [Item!]!
	reminders: [Reminder!]!
	deadlines: [DeadlineObject!]!
}

type ScheduleWorkTime {
	date: Date!
	workingTime: Float
}

type UnsplashPhotoConnection {
	nextPage: Int
	results: [UnsplashPhoto!]!
}

type UnsplashPhoto {
	id: ID!
	width: Int!
	height: Int!
	color: String!
	description: String
	urls: UnsplashPhotoUrls!
	user: UnsplashUser!
}

type UnsplashPhotoUrls {
	raw: String!
	full: String!
	regular: String!
	small: String!
	thumb: String!
	custom: String
}

type UnsplashUser {
	id: ID!
	username: String!
	name: String!
}

type EmailType {
	id: ID!
	name: String!
	category: EmailCategory!
	position: Int
	availableParams: [EmailParamForType!]!
}

type EmailParamForType {
	id: ID!
	param: EmailParam!
	required: Boolean!
}

type EmailParam {
	id: ID!
	paramId: String!
	name: String!
}

type EmailTemplate {
	id: ID!
	type: EmailType!
	timing: Json
	subject: Json!
	content: Json!
	owner: User!
}
