scalar DateTime
scalar Time
scalar Json
scalar Upload
scalar TimeZone

directive @deprecated(
	reason: String = "No longer supported"
) on FIELD_DEFINITION | ENUM_VALUE

type Query {
	me: User
	customer(id: ID!): Customer
	quote(id: ID!, token: String): Quote
		@deprecated(reason: "Quotes are not used anymore.")
	project(id: ID!, token: String): Project
	item(id: ID!, token: String): Item
	itemComments(itemId: ID!, token: String): [Comment!]!
		@deprecated(reason: "Prefer using item query directly.")
	# Get user's reminders
	reminders: [Reminder!]!
	# Get active items sorted by priority
	items: [Item!]!
	# Get tasks
	tasks(filter: TasksFilterInput, sort: TasksSortInput, token: String): [Item!]!
}

type Mutation {
	checkEmailAvailability(email: String!): Boolean!
	signup(
		email: String!
		password: String!
		firstName: String!
		lastName: String!
		company: CompanyInput
	): AuthPayload!
	sendResetPassword(email: String!): Boolean
	checkResetPassword(resetToken: String!): Boolean
	resetPassword(resetToken: String!, newPassword: String!): AuthPayload!
	login(email: String!, password: String!): AuthPayload!

	updatePassword(oldPassword: String!, newPassword: String!): User

	# Update user profile and his company
	updateUser(
		email: String
		firstName: String
		lastName: String
		startWorkAt: Time
		endWorkAt: Time
		timeZone: TimeZone
		workingDays: [DAY!]
		defaultDailyPrice: Int
		defaultVatRate: Int
		workingFields: [String!]
		jobType: JobType
		interestedFeatures: [String!]
		hasUpcomingProject: Boolean
		canBeContacted: Boolean
		painsExpressed: [String!]
		otherPain: String
		company: CompanyInput
		settings: SettingsInput
	): User

	# Create a new customer inside the user's company
	createCustomer(
		email: String!
		name: String
		firstName: String
		lastName: String
		title: Title
		phone: String
		occupation: String
		userNotes: Json
	): Customer!
	# Update a customer with new date
	updateCustomer(
		id: ID!
		email: String
		name: String
		firstName: String
		lastName: String
		title: Title
		phone: String
		occupation: String
		userNotes: Json
		customer: CustomerInput
	): Customer!
	# Remove a customer
	removeCustomer(id: ID!): Customer!

	# Create a new project for a customer of the user's company
	createProject(
		customerId: ID
		customer: CustomerInput
		name: String
		sharedNotes: Json
		personalNotes: Json
		template: ProjectTemplate
		sections: [SectionInput!]
		deadline: DateTime
		notifyActivityToCustomer: Boolean
	): Project!
	# Update project
	updateProject(
		id: ID!
		name: String
		sharedNotes: Json
		personalNotes: Json
		customerId: ID
		customer: CustomerInput
		deadline: DateTime
		notifyActivityToCustomer: Boolean
	): Project
	# Finish project
	archiveProject(id: ID!): Project!
	unarchiveProject(id: ID!): Project!
	# Remove project
	removeProject(id: ID!): Project!
	unremoveProject(id: ID!): Project!
	# Create a new quote for a customer of the user's company
	createQuote(
		customerId: ID
		customer: CustomerInput
		name: String
		template: QuoteTemplate
		option: OptionInput
	): Quote! @deprecated(reason: "Quotes are not used anymore.")
	# Update quote
	updateQuote(id: ID!, name: String!, option: OptionInput): Quote
		@deprecated(reason: "Quotes are not used anymore.")
	# Remove quote
	removeQuote(id: ID!): Quote
		@deprecated(reason: "Quotes are not used anymore.")

	updateOption(id: ID!, proposal: Json!): Option
		@deprecated(reason: "Quotes are not used anymore.")

	# Add section to one of the quote's option
	addSection(
		projectId: ID!
		name: String!
		items: [ItemInput!]
		position: Int
	): Section!
	# Update
	updateSection(id: ID!, name: String, position: Int): Section
	# Remove section
	removeSection(id: ID!): Section

	# Add an item to a section
	addItem(
		projectId: ID
		sectionId: ID
		name: String!
		type: ItemType
		description: String
		unit: Float
		position: Int
		dueDate: DateTime
		linkedCustomer: CustomerInput
		linkedCustomerId: ID

		# deprecated
		reviewer: Reviewer
		unitPrice: Int
		vatRate: Int
	): Item!
	# Update item properties
	updateItem(
		id: ID!
		# Updating the item's section in the project
		sectionId: ID
		projectId: ID
		token: String
		name: String
		type: ItemType
		description: String
		unit: Float
		timeItTook: Float
		comment: CommentInput
		position: Int
		dueDate: DateTime
		linkedCustomer: CustomerInput
		linkedCustomerId: ID
		tags: [ID!]

		# deprecated
		reviewer: Reviewer
		vatRate: Int
		unitPrice: Int
		notifyCustomer: Boolean
	): Item

	# Add task to the focus zone
	focusTask(id: ID!, reminders: [ReminderInput]): Item!

	# Remove task from the focus zone
	unfocusTask(id: ID!): Item!

	# Update an already validated item
	updateValidatedItem(id: ID!, unit: Float!, comment: CommentInput!): Item
		@deprecated(reason: "Use updateItem instead.")
	# Remove an item
	removeItem(id: ID!): Item
	# Snooze an item
	snoozeItem(id: ID!, until: DateTime, during: Int): Item
	# Unsnooze an item
	unsnoozeItem(id: ID!): Item
	# Finish an item
	finishItem(id: ID!, token: String, timeItTook: Float): Item
	# Reset an item (going back to pending)
	unfinishItem(id: ID!, token: String): Item
	# Send an amendment with all the updated items
	sendAmendment(quoteId: ID!): Quote
		@deprecated(reason: "Quotes are not used anymore.")

	# Send quote to validation, DRAFT -> SENT
	sendQuote(id: ID!): Quote! @deprecated(reason: "Quotes are not used anymore.")
	# Customer can accept quote, SENT -> ACCEPTED
	acceptQuote(id: ID!, token: String!): Quote!
		@deprecated(reason: "Quotes are not used anymore.")
	# Accept a single item from a sent quote
	acceptItem(id: ID!, token: String!): Item!
	# Reject a single item from a sent quote
	rejectItem(id: ID!, token: String!): Item!
	# Customer can reject invoice, SENT -> REJECTED
	rejectQuote(id: ID!, token: String!): Quote!
		@deprecated(reason: "Quotes are not used anymore.")
	# Accept amendment, all items goes UPDATED_SENT -> PENDING, pendingUnit becomes unit
	acceptAmendment(quoteId: ID!, token: String!): Quote
		@deprecated(reason: "Quotes are not used anymore.")
	# Reject amendment, all items goes UPDATED_SENT -> PENDING
	rejectAmendment(quoteId: ID!, token: String!): Quote
		@deprecated(reason: "Quotes are not used anymore.")

	# Send project, DRAFT -> ONGOING. If not specified, send an email
	startProject(id: ID!, notifyCustomer: Boolean): Project!
		@deprecated(reason: "Project are automatically started now.")

	#post a comment on an item
	postComment(itemId: ID!, token: String, comment: CommentInput!): Item

	uploadAttachments(
		files: [Upload!]!
		taskId: ID
		projectId: ID
		token: String
	): [File!]

	updateFile(id: ID!, filename: String!): File

	removeFile(id: ID!): File

	cancelReminder(id: ID!): Reminder

	# sends a test email to the user
	sendReminderTestEmail(id: ID!): Boolean!
	# sends a test preview email to the user
	sendReminderPreviewTestEmail(taskId: ID!, type: ReminderType!): Boolean!

	createTag(name: String!, colorBg: String!, colorText: String!): Tag!
}

input CommentInput {
	text: String!
}

input AddressInput {
	street: String
	city: String
	postalCode: String
	country: String
}

input CompanyInput {
	name: String
	email: String
	address: AddressInput
	phone: String
	type: String
	siret: String
	rcs: String
	rcsCity: String
	rm: String
	vat: String
	logo: Upload
}

input SettingsInput {
	assistantName: String
	askItemFinishConfirmation: Boolean
	askSendQuoteConfirmation: Boolean
	askStartProjectConfirmation: Boolean
}

input CustomerInput {
	name: String!
	title: Title
	firstName: String
	lastName: String
	email: String!
	address: AddressInput
	phone: String
	occupation: String
	userNotes: Json
	siret: String
	rcs: String
	rm: String
}

input ItemInput {
	name: String!
	description: String
	unit: Float
	type: ItemType

	# deprecated
	reviewer: Reviewer
	unitPrice: Int
	vatRate: Int
}

input SectionInput {
	name: String!
	items: [ItemInput!]!
}

input OptionInput {
	proposal: Json
	sections: [SectionInput!]!
}

input ReminderInput {
	# seconds after focus needed before notifying
	delay: Int
	type: ReminderType
}

type AuthPayload {
	token: String!
	user: User!
}

type Address {
	street: String
	city: String
	postalCode: String
	country: String
}

# Represents a company or an individual that is going to receive an invoice
type Customer {
	id: ID!
	title: Title
	firstName: String
	lastName: String
	name: String
	email: String!
	token: String
	address: Address
	phone: String
	occupation: String
	userNotes: Json
	siret: String
	rcs: String
	rm: String
	vat: String
}

enum QuoteStatus {
	DRAFT
	SENT
	ACCEPTED
	REJECTED
	INVOICED
	INVOICED_ACCEPTED
}

enum ProjectStatus {
	ONGOING
	ARCHIVED
	REMOVED

	# deprecated
	FINISHED
}

enum ProjectTemplate {
	BLANK
	WEBSITE
	IDENTITY
}

enum QuoteTemplate {
	BLANK
	WEBSITE
	IDENTITY
}

enum ItemStatus {
	PENDING
	SNOOZED
	FINISHED

	# deprecated statuses
	UPDATED
	UPDATED_SENT
	ADDED
	ADDED_SENT
}

enum Reviewer {
	USER
	CUSTOMER
}

enum ReminderType {
	# 5 min delay before sending
	DELAY
	# 2 day reminder
	FIRST
	# FIRST + days reminder
	SECOND
	# SECOND + 1 days reminder
	LAST
}

enum ReminderStatus {
	PENDING
	SENT
	ERROR
	CANCELED
}

enum DAY {
	MONDAY
	TUESDAY
	WEDNESDAY
	THURSDAY
	FRIDAY
	SATURDAY
	SUNDAY
}

type Reminder {
	id: ID!
	item: Item!
	type: ReminderType!
	sendingDate: DateTime!
	status: ReminderStatus
}

type ReminderPreview {
	type: ReminderType!
	sendingDate: DateTime!
	delay: Int!
}

union Viewer = User | Customer

type CommentView {
	viewer: Viewer!
	viewedAt: DateTime!
}

union Author = User | Customer

type Comment {
	id: ID!
	text: String!
	author: Author
	views: [CommentView!]!
	createdAt: DateTime!
}

enum ItemType {
	DEFAULT
	CUSTOMER
	CONTENT_ACQUISITION
	CUSTOMER_REMINDER
	VALIDATION
	USER_REMINDER
}

type Item {
	id: ID!
	owner: User!
	isFocused: Boolean!
	linkedCustomer: Customer
	name: String!
	type: ItemType!
	description: String
	unit: Float!
	section: Section
	comments: [Comment!]!
	status: ItemStatus!
	reminders: [Reminder!]!
	remindersPreviews: [ReminderPreview!]!
	position: Int
	timeItTook: Float
	dueDate: DateTime
	attachments: [File!]!
	tags: [Tag!]!

	reviewer: Reviewer @deprecated(reason: "Use `type: CUSTOMER` instead.")
	unitPrice: Int @deprecated(reason: "Unit price is not used anymore.")
	pendingUnit: Float
		@deprecated(reason: "There is no validation anymore. Use `unit` directly.")
	vatRate: Int! @deprecated(reason: "Vat rate is not used anymore.")
}

type Section {
	id: ID!
	name: String!
	items: [Item!]!
	# Project the section belongs to, can be null because of quotes
	project: Project
	position: Int!
}

type Option {
	id: ID!
	name: String!
	proposal: Json
	sections: [Section!]!
}

type Quote {
	id: ID!
	name: String!
	template: QuoteTemplate
	issuer: Company!
	customer: Customer!
	status: QuoteStatus!
	options: [Option!]!
	total: Float
	viewedByCustomer: Boolean!
	issuedAt: DateTime
	createdAt: DateTime!
	updatedAt: DateTime!
}

type Project {
	id: ID!
	name: String!
	template: ProjectTemplate
	sharedNotes: Json
	personalNotes: Json
	issuer: Company!
		@deprecated(reason: "Company is not used anymore. Use `owner` instead")
	owner: User!
	customer: Customer
	token: String
	status: ProjectStatus!
	sections: [Section!]!
	total: Float
	viewedByCustomer: Boolean!
	issuedAt: DateTime
	deadline: DateTime
	notifyActivityToCustomer: Boolean!
	daysUntilDeadline: Int
	attachments: [File!]!
	createdAt: DateTime!
	updatedAt: DateTime!
}

type Company {
	id: ID!
	name: String
	owner: User!
	email: String
	address: Address
	phone: String
	type: String
	siret: String
	rcs: String
	rcsCity: String
	rm: String
	vat: String
	logo: File
	projects: [Project!]!

	customers: [Customer!]!
		@deprecated(reason: "Use `customers` on User instead.")
	quotes: [Quote!]! @deprecated(reason: "Quotes are not used anymore.")
}

enum Title {
	MONSIEUR
	MADAME
}

enum JobType {
	TEAM
	FULLTIME_INDIVIDUAL
	PARTTIME_INDIVIDUAL
	NOT_FREELANCER
}

type Settings {
	assistantName: String!
	askItemFinishConfirmation: Boolean!
		@deprecated(reason: "Not available anymore.")
	askSendQuoteConfirmation: Boolean!
		@deprecated(reason: "Quote are not used anymore.")
	askStartProjectConfirmation: Boolean!
}

type User {
	id: ID!
	email: String!
	firstName: String
	lastName: String
	customers: [Customer!]!
	projects: [Project!]!
	company: Company!
		@deprecated(
			reason: "Company is not used anymore. User customers and projects instead."
		)
	defaultDailyPrice: Int
		@deprecated(reason: "Price was only needed for the deprecated Quote.")
	defaultVatRate: Int
	startWorkAt: Time
	endWorkAt: Time
	workingDays: [DAY!]!
	timeZone: TimeZone
	workingFields: [String!]!
	jobType: JobType
	interestedFeatures: [String!]!
	hasUpcomingProject: Boolean
	settings: Settings!
	hmacIntercomId: String!
	tasks(filter: TasksFilterInput, sort: TasksSortInput): [Item!]!
	focusedTasks: [Item!]!
	tags: [Tag!]!
}

union Owner = User | Customer

type File {
	id: ID!
	owner: Owner
	filename: String!
	mimetype: String!
	encoding: String!
	url: String!
}

input TasksFilterInput {
	linkedCustomerId: ID
}

enum TasksSortInput {
	unit_ASC
	unit_DESC
	dueDate_ASC
	dueDate_DESC
	createdAt_ASC
	createdAt_DESC
}

type Tag {
	id: ID!
	name: String!
	colorBg: String!
	colorText: String!
}
